###########################################################
#
# CMake file for stand alone QCI 
# 
############################################################

cmake_minimum_required(VERSION 3.0)

# Silence warnings about PROJECT_VERSION not being set
cmake_policy(SET CMP0048 OLD)

if (CMAKE_CURRENT_SOURCE_DIR MATCHES "^${CMAKE_BINARY_DIRECTORY}$")
  message( FATAL_ERROR "CMake should not be built in the source directory" )
endif (CMAKE_CURRENT_SOURCE_DIR MATCHES "^${CMAKE_BINARY_DIRECTORY}$")

project(QCI)

set(PROJECT_VERSION "1.0")
set(PROJECT_CONTACT "konstantin.roeder@kcl.ac.uk")
get_filename_component(GIT_ROOT ${QCI_SOURCE_DIR}/.. ABSOLUTE)
message(WARNING "Root directory is ${QCI_SOURCE_DIR}")
if (CMAKE_C_COMPILER_ID MATCHES "Intel")
    set(CMAKE_C_FLAGS_RELEASE "-O1 -DNDEBUG")
endif (CMAKE_C_COMPILER_ID MATCHES "Intel")

# Cmake modules/macros are in a subdirectory to keep this file cleaner
# CMake modules implement some additional functionality to check
# for external dependencies
set(CMAKE_MODULE_PATH ${GIT_ROOT}/CMakeModules)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

# if not specified by user, the standard build type is release
if(NOT CMAKE_BUILD_TYPE)
  #Release comes with -O3 by default
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Release Debug Debug_slow RelWithDebInfo MinSizeRel." FORCE)
endif(NOT CMAKE_BUILD_TYPE)

enable_language(CXX)

# the FORTRANCOMPILER check is in svn/CMakeModules
# it adds a compiler switch and sets flags
find_package(FORTRANCOMPILER)

# Compiler blacklist. Feel free to add more as required.
if (${COMPILER_SWITCH} STREQUAL "gfortran")
    # Get the version number
    execute_process(COMMAND "${CMAKE_Fortran_COMPILER}" "--version" OUTPUT_VARIABLE GCC_VERSION)
    string(REGEX MATCH "[0-9]+(\\.[0-9]+)+" CMAKE_Fortran_COMPILER_VERSION ${GCC_VERSION})
    # Require at least 4.7.4 
    if (CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 4.7.4)
       message(WARNING "If you have run a 'module load', the configuration must be wiped and rerun.")
       message(FATAL_ERROR "GCC version must be at least 4.7.4 but ${CMAKE_Fortran_COMPILER_VERSION} is being used.")
    endif()
endif()
if (${COMPILER_SWITCH} STREQUAL "nag")
    # Get the version number
    execute_process(COMMAND "${CMAKE_Fortran_COMPILER}" "-V" ERROR_VARIABLE NAG_VERSION)
    string(REGEX MATCH "[0-9]+(\\.[0-9]+)*" NAG_MAJOR_VERSION ${NAG_VERSION})
    string(REGEX MATCH "[0-9][0-9][0-9]+" NAG_MINOR_VERSION ${NAG_VERSION})
    set(CMAKE_Fortran_COMPILER_VERSION "${NAG_MAJOR_VERSION}.${NAG_MINOR_VERSION}")
    # We need nagfor to be at least 6.0 to include features from the 2008 standard.
    if (CMAKE_Fortran_COMPILER_VERSION VERSION_LESS 6.0.1028)
       message(WARNING "If you have run a 'module load', the configuration must be wiped and rerun.")
       message(FATAL_ERROR "nagfor version must be at least 6.0.1028 to include ERFC from the Fortran 2008 standard.")
    endif()
    # Ban 6.1.6109 as it has a problem with its preprocessor 
    if (CMAKE_Fortran_COMPILER_VERSION VERSION_EQUAL 6.1.6109)
       message(WARNING "If you have run a 'module load', the configuration must be wiped and rerun.")
       message(FATAL_ERROR "nagfor version 6.1.6109 is disallowed due to a known preprocessor bug.")
    endif()
endif()
if (${COMPILER_SWITCH} STREQUAL "ifort")
    # Get the version number
    execute_process(COMMAND "${CMAKE_Fortran_COMPILER}" "--version" OUTPUT_VARIABLE IFORT_VERSION)
    string(REGEX MATCH "[0-9]+(\\.[0-9]+)+" CMAKE_Fortran_COMPILER_VERSION ${IFORT_VERSION})
    #  No current requirements 
endif()
if (${COMPILER_SWITCH} STREQUAL "pgi")
    # Get the version number
    execute_process(COMMAND "${CMAKE_Fortran_COMPILER}" "--version" OUTPUT_VARIABLE PGI_VERSION)
    string(REGEX MATCH "[0-9]+(\\.[0-9]+)+" CMAKE_Fortran_COMPILER_VERSION ${PGI_VERSION})
    # No current requirements 
endif()

message("CMAKE_Fortran_COMPILER = ${CMAKE_Fortran_COMPILER}")
set(CMAKE_Fortran_MODULE_DIRECTORY ${HIRE_BINARY_DIR}/modules)
include_directories(${CMAKE_SOURCE_DIR})

# Glob all the sources
file(GLOB QCI_LIB_SOURCES ${GIT_ROOT}/source/*.f90
                           ${GIT_ROOT}/source/*.F90
                           ${GIT_ROOT}/source/utils/*.f90
                           ${GIT_ROOT}/source/utils/*.F90)

# Make a hire library
add_library(qcilib ${QCI_LIB_SOURCES})
set_module_dir(qcilib)
set_target_properties(qcilib PROPERTIES LINKER_LANGUAGE "Fortran")
set_target_properties(qcilib PROPERTIES COMPILE_DEFINITIONS "${COMPILE_DEFINITIONS};__HIRE") 

option(PROF_VER "Enable profiling" OFF)
if(PROF_VER)
	add_definitions(-DFOR_PROFILING)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
endif(PROF_VER)

add_definitions(-D_GIT_ROOT_='${GIT_ROOT}')

##########################
# EXECUTABLES START HERE #
##########################

add_executable(QCI main.F90)
set_target_properties(QCI PROPERTIES LINKER_LANGUAGE "Fortran") 
set_target_properties(QCI PROPERTIES COMPILE_DEFINITIONS "${COMPILE_DEFINITIONS};__HIRE")
set_module_depends(QCI qcilib)
target_link_libraries(QCI qcilib)

